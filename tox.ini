[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = fmt, lint, unit

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
lib_path = {toxinidir}/lib/charms/parca-k8s/
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=pdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
allowlist_externals = uv

[testenv:update-dependencies]
description = Update Python dependencies
commands =
    uv lock -U --no-cache
    uv pip compile -q --no-cache pyproject.toml -o requirements.txt
    uv pip compile -q --no-cache --all-extras pyproject.toml -o requirements-dev.txt

[testenv:generate-requirements]
description = Generate requirements files
commands =
    uv pip compile -q --no-cache pyproject.toml -o requirements.txt
    uv pip compile -q --no-cache --all-extras pyproject.toml -o requirements-dev.txt

[testenv:fmt]
description = Apply coding style standards to code
deps =
    -r {toxinidir}/requirements-dev.txt
commands =
    uv run ruff check --fix {[vars]all_path}
    uv run ruff format {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    -r {toxinidir}/requirements-dev.txt
commands =
    uv run ruff check {[vars]all_path}
    uv run ruff format --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    -r {toxinidir}/requirements-dev.txt
commands =
    uv run coverage run --source={[vars]src_path} \
                 -m pytest \
                 --ignore={[vars]tst_path}integration \
                 --tb native \
                 -v \
                 -s \
                 {posargs}
    uv run coverage report

[testenv:integration]
description = Run integration tests
deps =
    -r {toxinidir}/requirements-dev.txt
commands =
    uv run pytest -v \
           -s \
           --tb native \
           --ignore={[vars]tst_path}unit \
           --log-cli-level=INFO \
           {posargs}
